{
  "callToAction": "Read On-Chain Data",
  "graphqlQuery": [
    "const GET_STREAMS = gql`",
    "  {",
    "    streams(first: 10, orderBy: timestamp, orderDirection: desc) {",
    "      id",
    "      cancellation {",
    "        recipientBalance",
    "        recipientInterest",
    "        timestamp",
    "        txhash",
    "      }",
    "      deposit",
    "      exchangeRateInitial",
    "      ratePerSecond",
    "      recipient",
    "      recipientSharePercentage",
    "      sender",
    "      senderSharePercentage",
    "      startTime",
    "      stopTime",
    "      timestamp",
    "      token {",
    "        id",
    "        decimals",
    "        name",
    "        symbol",
    "      }",
    "      txs {",
    "        id",
    "        block",
    "        event",
    "        from",
    "        timestamp",
    "        to",
    "      }",
    "      withdrawals {",
    "        id",
    "        amount",
    "      }",
    "    }",
    "  }",
    "`;"
  ],
  "graphqlQueryName": "GET_STREAMS",
  "hooks": {
    "readData": [
      "if (!loading && !error && data && data.streams) {",
      "  console.log({ streams: data.streams });",
      "}"
    ]
  },
  "imports": [
    "import { MAINNET_ID, addresses, abis } from \"@sablier-v1-app/contracts\";"
  ],
  "learnUrl": "https://docs.sablier.finance/",
  "readOnChainData": [
    "// Should replace with the end-user wallet, e.g. Metamask",
    "const defaultProvider = getDefaultProvider();",
    "// Create an instance of an ethers.js Contract",
    "// Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/",
    "const sablierContract = new Contract(addresses[MAINNET_ID].sablier, abis.sablier, defaultProvider);",
    "const nextStreamId = await sablierContract.nextStreamId();",
    "console.log({ nextStreamId: nextStreamId.toString() });"
  ],
  "whatToLearn": "Sablier v1"
}
