{
  "callToAction": "Read On-Chain Balance",
  "contractsImportLine": "import { addresses, abis } from \"@project/contracts\";",
  "graphqlQuery": [
    "const GET_TRANSFERS = gql`",
    "  {",
    "    transfers(first: 10) {",
    "      id",
    "      from",
    "      to",
    "      value",
    "    }",
    "  }",
    "`;"
  ],
  "graphqlQueryName": "GET_TRANSFERS",
  "learnItems": [
    {
      "label": "Core Docs",
      "url": "https://thegraph.com/docs/quick-start"
    },
    {
      "label": "Community Chat",
      "url": "https://discord.gg/vtvv7FP"
    },
    {
      "label": "Twitter",
      "url": "https://twitter.com/graphprotocol"
    }
  ],
  "mounted": {
    "readData": [
      "if (!loading && !stale && data && data.transfers) {",
      "  console.log({ transfers: data.transfers });",
      "}"
    ]
  },
  "readOnChainData": [
    "const ceaErc20 = new ethers.Contract(addresses.ceaErc20, abis.erc20, defaultProvider);",
    "// A pre-defined address that owns some CEAERC20 tokens",
    "const tokenBalance = await ceaErc20.balanceOf(\"0x3f8CB69d9c0ED01923F11c829BaE4D9a4CB6c82C\");",
    "console.log({ tokenBalance: tokenBalance.toString() });"
  ],
  "whatToLearn": "The Graph"
}
